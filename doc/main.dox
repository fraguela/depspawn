namespace depspawn {

/**
\mainpage Data Dependent Spawn (DepSpawn) library


 [DepSpawn](http://depspawn.des.udc.es) is a C++ library that allows to easily parallelize applications in multicore systems. For this, the parallel tasks must be expressed as functions that convey their dependencies by means of their arguments. DepSpawn analyzes the arguments of each task when it is launched for parallel execution and it makes sure that tasks only run when all their dependencies are fulfilled.

 All we need to do to spawn as a parallel task the execution of function `f(a, b, ...)` using DepSpawn is to rewrite it as `::spawn(f, a, b, ...)`.
 
The type of the formal parameters of a funtion indicates whether they are only inputs or they can be both inputs and outputs following C++ semantics:
	-	Arguments by value (e.g. `int a`) are only inputs to the function because the function actually reveives a copy of the original argument, so it can only read, but never modify it.
	-	Arguments by constant reference (e.g. `const int& a`) are also only inputs to the function because although the function accesses the original argument through the reference, the `const` modifier prohibits its modification.
	-	Arguments by non-constant reference (e.g. `int& a`) are regarded as both inputs and outputs because the function accesses the original object provided by the caller, and it can both read and modify it.

 As an example, in the code below the function `foo` receives its two arguments by value, which makes them read-only for this function. As a result, DepSpawn can run in parallel all the evaluations of this function, as there are no dependences among them according to their arguments.

\code
#include "depspawn/depspawn.h"

using namespace depspawn;

int v[N];

void foo(int i, int j)
{
   ...
}

int main(int argc, char **argv) 
{
   for(int i = 0; i < N - 1; i++)
     spawn(foo, v[i], v[i + 1]);
}
\endcode

 However, in the code below `foo` can modify its second argument. This way, here DepSpawn executes sequentially all the evaluations of function `foo`, because each one of them takes as input a piece of data (`v[i]`) that is a potential output, i.e. can be written, by the evaluation of `foo` in the preceding iteration.

\code
#include "depspawn/depspawn.h"

using namespace depspawn;

int v[N];

void foo(int i, int& j)
{
   ...
}

int main(int argc, char **argv) 
{
   for(int i = 0; i < N - 1; i++)
     spawn(foo, v[i], v[i + 1]);
}
\endcode

Please follow the <a class="el" href="pages.html">list of topics</a> covered this documentation to learn how to install and use DepSpawn step by step.

**/


/**
\page page_installation Installing DepSpawn

\section sec_requirements Requirements

 DepSpawn requires:
 - A C++ compiler that supports C++11
 - [Intel (R) Threading Building Blocks (TBB)](http://threadingbuildingblocks.org) v3.0 update 6 or above (v4.3 update 6 for Mac OS X)
 - [CMake](https://cmake.org) 2.8.7 or above (3.1.3 for Mac OS X)
 - Optional: [Boost](http://www.boost.org) v1.48 or above (if not available DepSpawn will install the subset it uses)
 - Optional: [Doxygen](http://www.doxygen.org) for building its documentation

\section sec_insprocedure Procedure

Follow these steps:
-# Make sure TBBs are automatically found by your compiler following the steps described in \ref page_tbb_config.

-# Unpack the DepSpawn tarball (e.g. \c depspawn.tar.gz)

		tar -xzf depspawn.tar.gz
		cd depspawn
	
   or clone the project from its repository
 
 		git clone git@github.com:fraguela/depspawn.git
	
-# Create the temporary directory where the project will be built and enter it :

		mkdir build && cd build

-# Generate the files for building DepSpawn in the format that you prefer (Visual Studio projects, nmake makefiles, UNIX makefiles, Mac Xcode projects, ... ) using cmake.

 In this process you can use a graphical user interface for cmake such as \c cmake-gui in Unix/Mac OS X or \c CMake-gui in Windows, or a command-line interface such as \c ccmake. The process is explained here assuming this last possibility, as graphical user interfaces are not always available.
 
	-# run `ccmake ..`
	
	 This will generate the files for building DepSpawn with the tool that cmake choses by default for your platform. Flag `-G` can be used to specify the kind of tool that you want to use. For example if you want to use Unix makefiles but they are not the default in you system, run <tt>ccmake -G 'Unix Makefiles' ..</tt>

	 Run `ccmake --help` for additional options and details.

	-# Press letter \c c to configure your build.
	
	   \warning If CMake cannot find [Boost](http://www.boost.org) it will warn that it will use and install the subset it requires. Just press \c e to exit the help.

	-# Provide the values you wish for the variables that appear in the screen. The most relevant ones are:
		- `CMAKE_BUILD_TYPE` : String that specifies the build type. Its possible values are empty, Debug, Release, RelWithDebInfo and MinSizeRel.
		- `CMAKE_INSTALL_PREFIX` : Directory where DepSpawn will be installed
		
	 The variables that begin with `DEPSPAWN` change internal behaviors in the runtime of the library. Thus in principle they are of interest only to the developers of the library, although users can play with them to see how they impact in their applications. They are:
	    - `DEPSPAWN_DUMMY_POOL` : Boolean that if \c ON turns off the usage of pools by the library to manage the memory of its internal objects.
		- `DEPSPAWN_FAST_START` : If this boolean is \c ON, when a thread that is spawning tasks detects that there are too many ready pending tasks waiting to be executed, it stops and executes one of them before resuming its current task.
		- `DEPSPAWN_PROFILE` : When this boolean is \c ON the library gathers statistics about its internal operations.
		- `DEPSPAWN_SCALABLE_POOL` : This boolean controls whether the library managed its memory by means of the \c tbbmalloc library (if \c ON) or the standard C++ library (if \c OFF).
	-# When you are done, press \c c to re-configure cmake with the new values. If [Boost](http://www.boost.org) is missing you will get the same warning. Press \c e to exit the help.
	-# Press \c g to generate the files that will be used to build DepSpawn and exit cmake.
-# The rest of this explanation assumes that UNIX makefiles were generated in the previous step. 

	Run `make` in order to build the library and its tests.  The degree of optimization, debugging information and assertions enabled depends on the value you chose for variable `CMAKE_BUILD_TYPE`.
 \note You can use the flag `-j` to speedup the building process. For example,
   `make -j4` will use 4 parallel processes, while `make -j` will use one parallel process per available hardware thread.
-# (Optionally) run `make check` in order to run the DepSpawn tests. 
-# Run `make install` 

 This installs DepSpawn under the directory you specified for the `CMAKE_INSTALL_PREFIX` variable. If you left it empty, the default base directories will be `/usr/local` in Unix and `c:/Program Files` in Windows. 

   The installation places
	- The depspawn library in the subdirectory `lib`
	- The header files in the subdirectory `include/depspawn`
	- If [Boost](http://www.boost.org) is missing, the portion required by DepSpawn will be installed in `include/boost`
	- If [Doxygen](http://www.doxygen.org) is present, a manual in `share/depspawn`

-# (Optional *but stronly advised*) DepSpawn provides a slightly modified version of the [Blitz++ library](http://www.sourceforge.net/projects/blitz) that allows to use Blitz++ arrays and subarrays as arguments of the spawned functions, thus providing a very nice notation for array-based computations. The installation of this library, located in the directory `depspawn/depspawn-blitz-0.10`, is based on the traditional `configure` and `make` mechanisms. The installation instructions and Blitz++ documentation are found in the library directory.
 
-# You can remove the `depspawn` directory generated by the unpacking of the tarball or the cloning of the project repository.
**/


/**
\page page_tbb_config TBB configuration

TBBs require to set up some environment variables both to be compiled and to be used by an application during its execution. This usually requires executing the script 
	- `${TBBROOT}/bin/tbbvars.sh` if your shell is `bash`/`ksh`, or
	- `${TBBROOT}/bin/tbbvars.csh` if your shell is `csh`

 where `${TBBROOT}` is the directory where TBB has been installed. The file includes the definition of the variable `TBBROOT`, which must point to the directory where TBB has been installed, but it is usually left empty during the installation. For this reason right after intalling TBB you must edit this file to define this variable. In order to do this, open the file and look for a line like
 
      export TBBROOT="SUBSTITUTE_INSTALL_DIR_HERE"

 in the case of `tbbvars.sh` or 

      setenv TBBROOT "SUBSTITUTE_INSTALL_DIR_HERE"
	  
 in the case of `tbbvars.csh` and put the root directory for your TBB installation between the double quotes.
 
**/


/**
\page page_compiling Compiling and running

 Once we have installed DepSpawn, we are ready to test it in an application. For this purpose we will use the simple example code found in `examples/test_subobject.cpp`. In order to compile a DepSpawn application, we need to:
 -# Make sure the TBB environment is correctly set up, which is achieved following the steps described in \ref page_tbb_config
 -# Since DepSpawn relies on C++11, if our compiler requires some flag to support it (typically `-std=c++0x` or `-std=c++11`), we must apply it
 -# Tell the compiler where to find the DepSpawn headers using the `-I` flag
 -# Tell the compiler where to find the DepSpawn library using the `-L` flag
 -# Link with DepSpawn (`-ldepspawn`) and the TBB (`-ltbb`)
 -# If the `DEPSPAWN_SCALABLE_POOL` was set to `ON` when the library was compiled (see \ref page_installation), link also with `-ltbbmalloc`
 
 So if for example DepSpawn has been installed in `/usr/local` and our compiler does not automatically use `/usr/local/include` and `/usr/local/lib` to find header files and libraries, respectively, then `test_subobject.cpp` would be compiled using `g++` with the command
 
      g++ -std=c++0x -I/usr/local/include -o test_subobject test_subobject.cpp -L/usr/local/lib -ldepspawn -ltbb
	
 The execution of our application only requires that the TBB environment is correctly set up, as some TBB components are dynamically linked, and the TBB configuration allows to find them.
**/


/**
\page page_basics How to write a DepSpawn application

\tableofcontents

\section sec_semantics Semantics

 DepSpawn has a simple API and semantics for the parallelization of applications using tasks that the library automatically executes when their data dependencies have been fulfilled. Both of them are briefly described in this page. A more detailed discussion can be found in the publication [A framework for argument-based task synchronization with automatic detection of dependencies](http://www.des.udc.es/~basilio/papers/Gonzalez13-DepSpawn.pdf) ([DOI 10.1016/j.parco.2013.04.012](http://dx.doi.org/10.1016/j.parco.2013.04.012)), which only lacks some of the new synchronization mechanisms added in version 2.0 and described in \ref sec_api.
 
\subsection sec_functions Write your parallel tasks as functions

 A first thing to take into account is that all the parallel tasks must be expressed as functions and they must communicate with the rest of the application only by means of their arguments. This means that these functions should have return type `void` (if this is not the case, DepSpawn is going to ignore the value returned, anyway!) and provide their outputs by means of their arguments. All the kinds of C++ functions are supported:
 - Regular C++ functions (e.g. `void myf(int i, std::vector<char>& x) {...}`)
 - Member functions (those that belong to a `struct` or `class`)
 - Lambda functions (e.g. `[](Widget &r, double f, const char *str) {...}`)
 - Functor objects (those that define `operator()`)
 - `std::function` objects, defined in the standard header file `<functional>`
 - `boost::function` objects, defined in the Boost.Function library header file `<boost/function.hpp>`

\subsection sec_dependencies Express dependencies by means of the parameter types

 DepSpawn analyzes the types of the formal parameters of a function to identify whether they can be only read, or also modified, by the function. This, together with the actual arguments provided to the function when it is launched to execution, defines the data dependencies of the associated parallel task. Three situations are distinguished regarding the type of the formal parameters:
 - In C++ arguments can be passed by value or by reference. The changes made to the arguments passed by value can only be seen inside the function, as in fact they are copies of the original objects provided in the invocation. As a result these arguments are only inputs, and never outputs of the function.
 - Arguments passed by reference allow a function to access the original objects provided by the caller instead of copies. C++ references can be annotated as `const` or not.
	- `const` references do not allow to modify the object received, so just as the arguments passed by value, they are only inputs to the function.
	\warning Programmers can circunvent this semantics and actually modify these arguments in their functions, for example by writing to `mutable` portions of the object or changing their type by means of `const_cast`. Since DepSpawn assumes that `const` references are not modified inside a function, in these situations it would be better to turn such parameters into non-`const` references so that it knows the truth about your evil intentions.
    - non-`const` references can be both read and modified by the function, which turns them into inputs and outputs, being thus the natural mechanism to return results in DepSpawn.

 It is very important to remember that DepSpawn only tracks the dependencies on the arguments provided to the tasks, and not on any other piece of data. This means that in the code
\code
 struct example_struct {
   float value;
   double *array;
 };
 
 void my_function(const example_struct &arg1, int n, double * const p) {
   arg1.array[n] = *p;
   *p = arg1.array[n+1];
 }
 
 int main() 
 { example_struct my_struct;
   double *my_ptr;
   int i;
   ...
   spawn(my_function, my_struct, i, my_ptr);
   ...
 }
\endcode

DepSpawn will take into account for the dependencies of `my_function` the memory occupied by `my_struct`, `i` and `my_ptr`, which are its arguments, but not the memory locations pointed by `my_struct.array` and `ptr`, which have in fact an extent that is totally unknown to DepSpawn. That is, for every argument `x`, the runtime tracks the memory region \[`&x`, `&x`+`sizeof(x)`\). As a result, the two assignments inside `my_function` are untracked, and thus unsafe with respect to other parallel tasks that can access those memory positions.

\subsection sec_semanticsdetails The fine print

 Once we have expressed which are the inputs and the outputs of our tasks, DepSpawn makes sure that
- Whenever a task has a read-only dependency on an argument, i.e., it is only an input to the task, the task is only scheduled for execution when all the preceding tasks that write to some memory position within that argument have finished.
- When a task can write to an argument, i.e., it is a potential output for the task, the task is only scheduled for execution when all the preceding tasks that access some memory position within that argument, no matter it is for reading or for writing, have finished.

When an application does not have subtasks, that is, when all the tasks are spawned only by the main thread of execution, it is clear that the preceding tasks are those that the main thread spawned before the one being considered. A program has subtasks when the tasks spawned by the main thread also spawn tasks themselves, which also means that several threads can be spawning tasks. In this more general situation, two questions must be answered:
- Which tasks should be considered as preceding tasks of a new one? As of now, DepSpawn considers as preceding tasks all the tasks spawned by any thread before the considered one.
- When does a task with subtasks finish? As of now, DepSpawn considers that a task finishes only when all its subtasks finish.

\section sec_api Interface

 All the components of the library are made available in the header file `depspawn.h` and they are encapsulated in the `::depspawn` namespace. These are the main components:
- The most important function is of course spawn(), which allows to request the parallel execution of any function `f` with any arbitrary list of arguments `a`, `b`, `c`, ... just with `spawn(f, a, b, c, ... )`. 
- `wait_for_all()` is probably the next most important function. As its name implies, it waits for all the spawned tasks to finish.
- `wait_for_subtasks()` waits for all the subtasks spawned within the current task.
- `wait_for()` waits for the specific set of objects provided as arguments to be ready for reading.
- `set_threads()` is the preferred way to initialize the library, as it allows to specify both the number of threads to use and the stack size of each thread.
- `set_task_queue_limit()` can help optimize the performance if DepSpawn has been compiled setting the configuration variable `DEPSPAWN_FAST_START` on (see \ref page_installation). When this variable is active, whenever a thread spawns a new task, it checks how many ready tasks (i.e., already free of dependencies) are waiting to be executed. If this value is greater than a given threshold, the thread tries to execute one of these pending tasks before returning to its current task. By default the library sets this threshold to twice the number of threads in use specified using `set_threads()`. The user however is free to modify this threshold using `set_task_queue_limit()`.
- The `Observer` class provides objects which upon destruction wait for all the tasks spawned by their thread since their creation to finish. As a result, for example, the code \code
	  { depspawn::Observer o;
	    spawn(f, a, b);
	    spawn(g, v[i], b);
	    spawn(h, a, q->value);
	  }
	  printf(...);
 \endcode
makes sure that the tasks `f`, `g` and `h` have finished before the `printf` statement.
- `depspawn_sync(...)` is a macro that executes the code between its parenthesis and waits for the tasks it has spawned to finish. It is therefore equivalent to \code
        { depspawn::Observer o; ... } 
 \endcode
- `ignore()` and `Ignore` are a function and a class, respectively, that help express situations in which we do not want to track dependencies on a given task argument. They are discussed in \ref sec_ignore.

\subsection sec_example1 Example

The following example illustrates the use of this API to parallelize a program in which the  variables `i` and `j` can be modified in two parallel `incr` tasks, while a third task `add` must wait for them to finish in order to use them to compute `r`.
 
\dontinclude simple.cpp
\skip include
\until return
\until }
**/


/**
\page page_blitz Integration with Blitz++

 In \ref sec_semantics we saw that DepSpawn tracks the memory occupied by the objects passed as arguments to the tasks in order to detect dependencies. While this suffices in many situations, sometimes it may be desirable to express dependencies on regions that are not consecutive, such as tiles of a matrix. For this reason DepSpawn provides support for [Blitz++](http://www.sourceforge.net/projects/blitz) arrays, which are well known for their efficiency, flexibility and intutive notation. 
 
 Unfortunately, using the standard distribution of Blitz++ would imply a noticeable overhead for DepSpawn to compute the dependencies between different arrays because of the lack of some useful information in the objects. For this reason, a slightly modified version of Blitz++, in which the arrays keep this information, is provided with DepSpawn. The installation of this library is totally optional. 
 
 Three things must be taken into account in order to use this feature:
- Since it is optional, and the user may have even not installed Blitz++, DepSpawn only triggers (and compiles) the support code for Blitz++ if it detects that it is being in use, which **requires including the Blitz++ headers before depspawn.h** in the application.

- Blitz++ is not compiled by default in thread-safe mode. For this reason in order to correctly compile a DepSpawn + Blitz++ application, it is necessary to define the macros
 
         -DBZ_THREADSAFE -DBZ_THREADSAFE_USE_TBB 
		 
- DepSpawn tracks separately dependencies between memory regions and Blitz++ arrays. For this reason any access to a Blitz++ array memory position that must be tracked shoyld be made only by means of Blitz++ arrays.
 **/


/**
\page page_trickstips Tips & tricks

\tableofcontents
 
\section sec_stdmove Freezing arguments

 Sometimes one may need to freeze an argument to a task, so that it is not affected by future changes of the value of the object. A typical example of this situation would be the code
\code
      for(i = 0; i < N; i++)
        spawn(f, w, i);
\endcode
in which we want each task to work with a different value of `i`. Unfortunately, `i` is being modified in each iteration of the loop, so when the task generated during a given iteration x begins its execution, it will probably find that `i` has no longer the value x.

Another situation in which we would need to freeze an argument is when it may have already destroyed when the task begins its execution. Let us have a look for example to this code:
\code
      void my_function(Widget &w) {
	     int i = w.something();
		 spawn(f, w, i);
	  }
	  ...
	  my_function(my_widget);
\endcode
Do you see the problem? `f` will try to access `i` as one of its arguments when it begins its execution, but at that point very probably the thread that spawed the task will have already left
function `my_function`, thus destroying `i`.

 Fortunately, freezing an argument to a spawned task is very easy: it suffices to turn it into an rvalue by means of the `std::move` function found in the `<utility>` standard header. Thus, the correct coding for our examples would be `spawn(f, w, std::move(i))` in both of them.
 
 Notice that freezing an argument has a secondary effect: since the task works with a frozen copy of the variable, it does not have to track dependencies on that argument and it does not generate new dependencies for subsequent tasks that use the frozen variable either. Also, since the task receives a copy, any change will be made on the copy, so even if the corresponding argument is a non-`const` reference, those changes will not be reflected in the original variable.

\section sec_pointertrick Using pointers to avoid generating false dependencies

The requirement that a task must fulfill all the dependencies on its arguments before it can
begin its execution always leads to correct executions, but sometimes it can limit the
performance unnecessarily. Imagine we have this piece of code
\code	
	void does_more_stuff(Widget &w) {
	   .... // Part 1: does not use w
	   spawn(works_on_widget, w, other_stuff);
	   ...  // Part 2: can be done in parallel with works_on_widget
	   wait_for(w);
	   ...  // Part 3: do something with w
	}
	
	spawn(f, ..., my_widget, ...);
	spawn(does_more_stuff, my_widget);
\endcode
where `works_on_widget` modifies its first argument. Since `does_more_stuff` receives its argument by means of a non-`const` reference, it will only begin its execution once `f` finishes, as there is a dependency on `my_widget`. While this is correct, we can see that `does_more_stuff` does not actually interact with `w` until Part 3 . Thus we could actually parallelize the execution of `f` with Parts 1 and 2 of `does_more_stuff` if we could pass to `does_more_stuff` its argument in such a way that this dependency were not seen. This could be achieved using what we learned on pointers in \ref sec_dependencies, which is basically that a pointer carries dependences on the pointer itself, but not on the object(s) it points to. As a result, if we wrote our code like this:
\code	
	void does_more_stuff(Widget *wp) {
	   Widget& w = *wp;
	   .... // Part 1: does not use w
	   spawn(works_on_widget, w, other_stuff);
	   ...  // Part 2: can be done in parallel with works_on_widget
	   wait_for(w);
	   ...  // Part 3: do something with w
	}
	
	spawn(f, ..., my_widget, ...);
	spawn(does_more_stuff, &my_widget);
\endcode
DepSpawn would not see any dependency between `f` and `does_more_stuff` and it would run them in parallel. The dependencies on `works_on_widget` and the `wait_for` statement would be honored, as they are expressed on the object itself, not on a pointer to it.

\section sec_ignore A general mechanism to avoid generating dependencies

 The pointer pointer trick requires changing both the API and the invocation of a function, which may be sometimes undesirable. Also, it changes permanently the semantics of the associated
function parameter, while it may be the case that we only want to avoid dependencies in some specific invocation(s) of a function. For this reason, DepSpawn provides two other mechanisms to avoid generating dependencies:
- `ignore()` is a function such that if an argument `x` to a `::spawn` invocation is written like `ignore(x)`, any dependency on `x` will be ignored for the sake of this task. This means that, just as with the pointer trick, it will neither wait for pending writes or reads to `x` nor generate new dependencies for future tasks that could access `x`.
- If a format parameter of a function `f` that used to have type `T` is changed to have type `Ignore<T>`, similarly to what happened with the pointer trick, it will never track or generate dependencies on the argument provided for that parameter. The advantage here is that, contrary to the pointer trick, we can continue to send the argument "as is" to `f` instead of its address.  `Ignore<T>` provides an implicit conversion operator to the type `T` to access its content.


\section sec_overloading Overloaded functions
	
 The compiler can get confused when there are several versions of the function to spawn. The current approach to solve this is to provide the function type to `::spawn` by means of a template argument. Here is an example:
\code
	void f(int& i) { ... }
	
	void f(float& f) { ... }
	
	...
	
	spawn<void(&)(int&)>(f, an_int);
	spawn<void(&)(float&)>(f, a_float);
\endcode


\section sec_sequential Sequential execution

 If the macro `SEQUENTIAL_DEPSPAWN` is defined during the compilation of a source file, its `spawn()` operations will be replaced by sequential function invocations.
 

**/
}
